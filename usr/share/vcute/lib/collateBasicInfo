#!/bin/sh

function collateBasicInfo {

# if an input is present, only update the one guest (BUT HOW??)
# $1 will be the guest name
# not implemented yet

local i=0

a="$(vsomething -q echo -- --all)"
b="$(vsomething -q echo -- --marked)"
c="$(vsomething -q echo -- --running)"

GUESTS=( )
for f in "${a}"; do
GUESTS+=($f)
done

LIST_MARKED=( )
for f in "${b}"; do
LIST_MARKED+=($f)
done

LIST_RUNNING=( )
for f in "${c}"; do
LIST_RUNNING+=($f)
done


#find out which are marked
GUESTS_MARKED=( )
for (( i=0; i<${#GUESTS[@]}; i++ )); do
containsElement "${GUESTS[i]}" "${LIST_MARKED[@]}"
GUESTS_MARKED[$i]=$?
done
#find out which are running
GUESTS_RUNNING=( )
for (( i=0; i<${#GUESTS[@]}; i++ )); do
containsElement "${GUESTS[i]}" "${LIST_RUNNING[@]}"
GUESTS_RUNNING[$i]=$?
done
#find out memory limit
GUESTS_MEMALLOC=( )
GUESTS_MEMALLOC_H=( )
for (( i=0; i<${#GUESTS[@]}; i++ )); do
GUESTS_MEMALLOC[$i]=$(cat ${VCONF_LOC}/${GUESTS[$i]}/cgroup/memory.limit_in_bytes)
cgroupSerialize "${GUESTS_MEMALLOC[$i]}"
GUESTS_MEMALLOC[$i]=${RETURN_VAL}
megaize "${GUESTS_MEMALLOC[$i]}"
GUESTS_MEMALLOC_H[$i]=${RETURN_VAL}
done
#find current memory limit
GUESTS_MEMCURRENT=( )
GUESTS_MEMCURRENT_H=( )
cgroupLocation memory
CLOC="${RETURN_VAL}"
for (( i=0; i<${#GUESTS[@]}; i++ )); do
   if [ "${GUESTS_RUNNING[$i]}" != "1" ] ; then
	GUESTS_MEMCURRENT[$i]=$(cat ${CLOC}/${GUESTS[$i]}/memory.usage_in_bytes)
	megaize "${GUESTS_MEMCURRENT[$i]}"
	GUESTS_MEMCURRENT_H[$i]=${RETURN_VAL}
   else
	GUESTS_MEMCURRENT_H[$i]="---"
   fi
done
#find current memory max
GUESTS_MEMMAX=( )
GUESTS_MEMMAX_H=( )
cgroupLocation memory
CLOC="${RETURN_VAL}"
for (( i=0; i<${#GUESTS[@]}; i++ )); do
   if [ "${GUESTS_RUNNING[$i]}" != "1" ] ; then
	GUESTS_MEMMAX[$i]=$(cat ${CLOC}/${GUESTS[$i]}/memory.max_usage_in_bytes)
	megaize "${GUESTS_MEMMAX[$i]}"
	GUESTS_MEMMAX_H[$i]=${RETURN_VAL}
   else
	GUESTS_MEMMAX_H[$i]="---"
   fi
done
#find out memory swap limit
GUESTS_SWPALLOC=( )
GUESTS_SWPALLOC_H=( )
for (( i=0; i<${#GUESTS[@]}; i++ )); do
GUESTS_SWPALLOC[$i]=$(cat ${VCONF_LOC}/${GUESTS[$i]}/cgroup/memory.memsw.limit_in_bytes)
cgroupSerialize "${GUESTS_SWPALLOC[$i]}"
GUESTS_SWPALLOC[$i]=${RETURN_VAL}
megaize "${GUESTS_SWPALLOC[$i]}"
GUESTS_SWPALLOC_H[$i]=${RETURN_VAL}
done
#find current memory limit
GUESTS_SWPCURRENT=( )
GUESTS_SWPCURRENT_H=( )
cgroupLocation memory
CLOC="${RETURN_VAL}"
for (( i=0; i<${#GUESTS[@]}; i++ )); do
   if [ "${GUESTS_RUNNING[$i]}" != "1" ] ; then
      if [ -e "${CLOC}/${GUESTS[$i]}/memory.memsw.usage_in_bytes" ] ; then
         GUESTS_SWPCURRENT[$i]=$(cat ${CLOC}/${GUESTS[$i]}/memory.memsw.usage_in_bytes)
         megaize "${GUESTS_SWPCURRENT[$i]}"
         GUESTS_SWPCURRENT_H[$i]=${RETURN_VAL}
      else
         GUESTS_SWPCURRENT_H[$i]="!!!"
      fi
   else
	GUESTS_SWPCURRENT_H[$i]="---"
   fi
done
#find current memory max
GUESTS_SWPMAX=( )
GUESTS_SWPMAX_H=( )
cgroupLocation memory
CLOC="${RETURN_VAL}"
for (( i=0; i<${#GUESTS[@]}; i++ )); do
   if [ "${GUESTS_RUNNING[$i]}" != "1" ] ; then
      if [ -e "${CLOC}/${GUESTS[$i]}/memory.memsw.usage_in_bytes" ] ; then
         GUESTS_SWPMAX[$i]=$(cat ${CLOC}/${GUESTS[$i]}/memory.memsw.max_usage_in_bytes)
         megaize "${GUESTS_SWPMAX[$i]}"
         GUESTS_SWPMAX_H[$i]=${RETURN_VAL}
      else
         GUESTS_SWPMAX_H[$i]="!!!"
      fi
   else
	GUESTS_SWPMAX_H[$i]="---"
   fi
done

if [ "$DEBUG" = "1" ]; then
  echo "GUESTS_ALL[$i] = name :: marked :: running"
for (( i=0; i<${#GUESTS[@]}; i++ ));
do
  echo "GUESTS[$i] = ${GUESTS[$i]} :: ${GUESTS_MARKED[$i]} :: ${GUESTS_RUNNING[$i]}"
done
fi

return
}
